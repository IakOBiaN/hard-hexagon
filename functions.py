from math import sqrt,log

#iterations count
times = 1000

def G(x,times=times):
    prod = 1.
    for i in range(1,times):
        prod = prod*1./((1.-x**(5.*i-4.))*(1.-x**(5.*i-1.)))
    return prod

def H(x,times=times):
    prod = 1.
    for i in range(1,times):
        prod = prod*1./((1.-x**(5.*i-3.))*(1.-x**(5.*i-2.)))
    return prod

def P(x,times=times):
    prod = 1.
    for i in range(1,times):
        prod = prod*(1.-x**(2.*i-1.))
    return prod

def Q(x,times=times):
    prod = 1.
    for i in range(1,times,1):
        prod = prod*(1.-x**i)
    return prod

def calculate(x,find = 0.0):
	if x < 0:
		z = (-x*H(x)**5)/G(x)**5
		rho = -x*G(x)*H(x**6)*P(x**3)/P(x)
		prod = 1.0
		for i in range(1,times,1):
			prod = prod*((1.0-x**(6.0*i-4.0))*(1.0-x**(6.0*i-3.0))**2*(1.0-x**(6.0*i-2.0)))/((1.0-x**(6.0*i-5.0))*(1.0-x**(6.0*i-1.0))*(1.0-x**(6.0*i))**2)
		btp = H(x)**3*Q(x**5)**2/G(x)**2*prod
	else:
		z = G(x)**5/((x)*H(x)**5)
		rho23 = x**2*H(x)*Q(x)*H(x**9)*Q(x**9)/Q(x**3)**2
		rho1 = H(x)*Q(x)*(G(x)*Q(x)+x**2*H(x**9)*Q(x**9))/Q(x**3)**2
		rho = (rho1 + rho23*2.0)/3.0
		prod = 1.0
		for i in range(1,times,1):
			prod = prod*((1.0-x**(3.0*i-2.0))*(1.0-x**(3.0*i-1.0)))/(1.0-x**(3.0*i))**2
		btp = x**(-1.0/3.0)*G(x)**3*Q(x**5)**2/H(x)**2*prod
	return log(z)-find, -log(btp),rho

x_to_mu = [[ -8.0 , -0.0003349012697902475 ],[ -7.9 , -0.0003700580648865072 ],[ -7.8 , -0.0004088979649110942 ],[ -7.7 , -0.0004518051587381021 ],[ -7.6 , -0.0004992035446273042 ],[ -7.5 , -0.0005515607541108212 ],[ -7.4 , -0.0006093925659379304 ],[ -7.3 , -0.0006732677439712753 ],[ -7.2 , -0.0007438133349849541 ],[ -7.1 , -0.000821720464278885 ],[ -7.0 , -0.0009077506688244404 ],[ -6.9 , -0.001002742809205116 ],[ -6.8 , -0.0011076206028033263 ],[ -6.7 , -0.0012234008213751228 ],[ -6.6 , -0.001351202196184163 ],[ -6.5 , -0.001492255073035688 ],[ -6.4 , -0.0016479118576230613 ],[ -6.3 , -0.0018196582882918312 ],[ -6.2 , -0.0020091255683091697 ],[ -6.1 , -0.0022181033826170395 ],[ -6.0 , -0.0024485538144069594 ],[ -5.9 , -0.0027026261641876436 ],[ -5.8 , -0.0029826726577736455 ],[ -5.7 , -0.0032912650092047006 ],[ -5.6 , -0.0036312117793750077 ],[ -5.5 , -0.004005576440455378 ],[ -5.4 , -0.004417696019387086 ],[ -5.3 , -0.004871200150224322 ],[ -5.2 , -0.00537003031442594 ],[ -5.1 , -0.005918458990052692 ],[ -5.0 , -0.0065211083652020295 ],[ -4.9 , -0.007182968198293474 ],[ -4.8 , -0.00790941232891936 ],[ -4.7 , -0.008706213259505132 ],[ -4.6 , -0.009579554142433363 ],[ -4.5 , -0.010536037423045503 ],[ -4.4 , -0.011582689310668446 ],[ -4.3 , -0.012726959183391916 ],[ -4.2 , -0.013976712984884095 ],[ -4.1 , -0.015340219651381224 ],[ -4.0 , -0.01682612962330985 ],[ -3.9 , -0.018443444558427013 ],[ -3.8 , -0.0202014774812228 ],[ -3.7 , -0.022109802784728627 ],[ -3.6 , -0.024178195751501586 ],[ -3.5 , -0.026416561582338058 ],[ -3.4 , -0.02883485431103627 ],[ -3.3 , -0.03144298643173386 ],[ -3.2 , -0.034250730555284915 ],[ -3.1 , -0.03726761491867128 ],[ -3.0 , -0.04050281506568738 ],[ -2.9 , -0.04396504446211011 ],[ -2.8 , -0.047662447165961686 ],[ -2.7 , -0.05160249590626799 ],[ -2.6 , -0.05579189900045172 ],[ -2.5 , -0.06023651943947928 ],[ -2.4 , -0.0649413091828803 ],[ -2.3 , -0.06991026124032665 ],[ -2.2 , -0.07514638149659468 ],[ -2.1 , -0.08065168150125918 ],[ -2.0 , -0.08642719264368917 ],[ -1.9 , -0.09247300132445362 ],[ -1.8 , -0.0987883039731559 ],[ -1.7 , -0.10537148010169173 ],[ -1.6 , -0.11222018106221053 ],[ -1.5 , -0.1193314318281218 ],[ -1.4 , -0.12670174294651682 ],[ -1.3 , -0.13432722981883524 ],[ -1.2 , -0.14220373663838498 ],[ -1.1 , -0.15032696262419865 ],[ -1.0 , -0.15869258861131502 ],[ -0.9 , -0.16729640255734823 ],[ -0.8 , -0.17613442307614263 ],[ -0.7 , -0.1852030206886036 ],[ -0.6 , -0.19449903707318067 ],[ -0.5 , -0.20401990319749885 ],[ -0.4 , -0.21376375782160623 ],[ -0.3 , -0.22372956849619136 ],[ -0.2 , -0.23391725786157308 ],[ -0.1 , -0.24432783882443193 ],
[ 0.0 , -0.254963563105131 ],[ 0.1 , -0.2658280887873631 ],[ 0.2 , -0.2769266739733481 ],[ 0.3 , -0.28826640560745387 ],[ 0.4 , -0.2998564752037203 ],[ 0.5 , -0.3117085169301514 ],[ 0.6 , -0.32383702876557907 ],[ 0.7 , -0.33625990502595315 ],[ 0.8 , -0.3489991196767449 ],[ 0.9 , -0.3620816164827845 ],[ 1.0 , -0.37554048748285784 ],[ 1.1 , -0.38941656114201956 ],[ 1.2 , -0.40376058579106294 ],[ 1.3 , -0.41863630090439047 ],[ 1.4 , -0.43412487344801814 ],[ 1.5 , -0.45033150948023115 ],[ 1.6 , -0.4673956826975911 ],[ 1.7 , -0.4855076945256846 ],[ 1.8 , -0.5049370442124423 ],[ 1.9 , -0.5260846758845944 ],[ 2.0 , -0.5495889034399168 ],[ 2.1 , -0.5765711834429206 ],[ 2.2 , -0.6093373338815395 ],[ 2.3 , -0.654288230832615 ],[ 2.4 , -0.7691364918789432 ],[ 2.5 , 0.19193106632667525 ],[ 2.6 , 0.14323669931322758 ],[ 2.7 , 0.11508447815269837 ],[ 2.8 , 0.09562390834672783 ],[ 2.9 , 0.0810381066727121 ],[ 3.0 , 0.06958424805334766 ],[ 3.1 , 0.06031280070223449 ],[ 3.2 , 0.05264662141409496 ],[ 3.3 , 0.0462075757890198 ],[ 3.4 , 0.04073395733695088 ],[ 3.5 , 0.036036904788883856 ],[ 3.6 , 0.03197556399046118 ],[ 3.7 , 0.02844205821442032 ],[ 3.8 , 0.025351944830394466 ],[ 3.9 , 0.022637910681741483 ],[ 4.0 , 0.020245466390611658 ],[ 4.1 , 0.018129921492116244 ],[ 4.2 , 0.016254206941946212 ],[ 4.3 , 0.014587273946367824 ],[ 4.4 , 0.013102894348669772 ],[ 4.5 , 0.011778746826360565 ],[ 4.6 , 0.010595710405407417 ],[ 4.7 , 0.009537310927061239 ],[ 4.8 , 0.008589282097063831 ],[ 4.9 , 0.007739213570847334 ],[ 5.0 , 0.006976265991372397 ],[ 5.1 , 0.006290938130036185 ],[ 5.2 , 0.0056748750086753315 ],[ 5.3 , 0.00512070857336855 ],[ 5.4 , 0.004621924461287458 ],[ 5.5 , 0.004172749861309289 ],[ 5.6 , 0.0037680585621043174 ],[ 5.7 , 0.0034032901084376298 ],[ 5.8 , 0.0030743806182381684 ],[ 5.9 , 0.0027777033000135165 ],[ 6.0 , 0.0025100170887779765 ],[ 6.1 , 0.002268422115292809 ],[ 6.2 , 0.002050320957574157 ],[ 6.3 , 0.0018533848097723074 ],[ 6.4 , 0.001675523852502494 ],[ 6.5 , 0.0015148612286972492 ],[ 6.6 , 0.0013697101262813017 ],[ 6.7 , 0.001238553548218254 ],[ 6.8 , 0.0011200264154295543 ],[ 6.9 , 0.0010128997016047474 ],[ 7.0 , 0.0009160663432468655 ],[ 7.1 , 0.0008285287051887884 ],[ 7.2 , 0.0007493874126682273 ],[ 7.3 , 0.0006778313869676375 ],[ 7.4 , 0.0006131289434957067 ],[ 7.5 , 0.0005546198297197723 ],[ 7.6 , 0.0005017080961268874 ],[ 7.7 , 0.0004538557068601348 ],[ 7.8 , 0.00041057680822468174 ],[ 7.9 , 0.00037143258319446125 ],[ 8.0 , 0.00033602662862943476 ]]

def get_solution():
	solution = []
	for pair in reversed(x_to_mu):
		result = calculate(pair[1])
		solution.append(result)
	return solution
